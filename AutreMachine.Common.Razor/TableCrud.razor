@typeparam U where U : IBaseIdClass, new()

@if (isLoading)
{
    <p><div class="spinner"></div></p>
}
@if (errorMessage != null)
{
    <p><div class="alert alert-danger">@errorMessage</div></p>
}

@if (Items != null)
{
    <table class="table table-striped">

        <thead>
            <tr>
                @HeaderTemplate
                <td></td>
            </tr>
        </thead>

        <tbody>
            @if (Items.Count() > 0)
            {
                foreach (var item in Items)
                {
                    <tr>
                        @RowTemplate(item)
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-primary" @onclick="async() => await EnterEditMode(item.Id)"><i class="fas fa-edit"></i> Edit</button>
                                <button type="button" class="btn btn-primary" @onclick="async() => await DeleteClass(item.Id)"><i class="fas fa-minus"></i> Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2"><i>Found no item</i></td>
                </tr>
            }
        </tbody>
    </table>
}

<p>
    @if (editModel != null)
    {
        <EditForm Model="editModel" FormName="EditForm" method="put" OnValidSubmit="@(async () => await UpdateClass())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h3>Update</h3>
            <dl>
                @if (editModel != null)
                {
                    @ModelComponent(editModel)
                }
            </dl>
            <button class="btn btn-primary">Update</button>
            <button class="btn btn-primary" @onclick="async() => await CancelUpdate()">Cancel</button>

        </EditForm>
    }
    else
    {
        <EditForm Model="addModel" FormName="AddForm" method="post" OnValidSubmit="@(async () => await AddClass())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h3>Add New</h3>
            <dl>
                @if (addModel != null)
                {
                    @ModelComponent(addModel)
                }
            </dl>
            <button class="btn btn-primary">Create</button>
        </EditForm>
    }
</p>



@code {
     /*
     * There are 2 possibilities to fill the list :
     * - 1. populate the GetAllDataDelegate : it will be called at start
     * - 2. Or call SetData when overriding onRenderAsync (firstRender)
     * Warning : not both !
     */

    private List<U>? Items { get; set; }

    [Parameter]
    public RenderFragment<U> EditComponent { get; set; }

    [Parameter]
    public RenderFragment<U> ModelComponent { get; set; }

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment<U> RowTemplate { get; set; }

    [Parameter]
    public Func<Task<ServiceResponse<List<U>>>>? GetAllDelegate { get; set; }

    [Parameter]
    public Func<U, Task<ServiceResponse<U>>> UpdateDelegate { get; set; }

    [Parameter]
    public Func<U, Task<ServiceResponse<U>>> AddDelegate { get; set; }

    [Parameter]
    public Func<int, Task<ServiceResponseEmpty>> DeleteDelegate { get; set; }


    public static Action OnEnteringEditMode;

    [SupplyParameterFromForm]
    private U? addModel { get; set; } = new U();

    private U? editModel;

    private bool isLoading = false;
    private string? errorMessage;

    /// <summary>
    /// Only for calling if GetAllDelegate is filled
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        if (GetAllDelegate != null)
        {
            // Get categories
            isLoading = true;
            var response = await GetAllDelegate.Invoke();

            if (response.Succeeded)
            {
                Items = response.Content;
                errorMessage = null;
            }
            else
                errorMessage = response.Message;

            isLoading = false;
        }
        await base.OnInitializedAsync();
    }

    private void clearAddModel()
    {
        // Clear model
        addModel = new U();
        /*if (categories != null && categories.Count > 0 && addModel != null)
            addModel.CategoryId = categories.First().id;*/
    }

    public void SetData(List<U> items)
    {
        Items = items;
        StateHasChanged();
    }

    public async Task EnterEditMode(int id)
    {
        if (Items != null)
        {
            var item = Items.Where(x => x.Id == id).FirstOrDefault();
            if (item != null)
                editModel = item; 
        }
    }

    public async Task CancelUpdate()
    {
        editModel = default(U);
    }

    public async Task AddClass()
    {
        if (addModel != null && AddDelegate != null)
        {
            var response = await AddDelegate.Invoke(addModel);

            if (response.Succeeded && response.Content != null)
            {
                if (Items == null)
                    Items = new List<U>();

                Items.Add(response.Content);
            }

            // Clear model
            clearAddModel();
        }
    }

    public async Task UpdateClass()
    {
        if (editModel != null && UpdateDelegate != null)
        {
            var resp = await UpdateDelegate.Invoke(editModel);

            if (resp.Succeeded && Items != null && resp.Content != null)
            {
                var found = Items.Where(x => x.Id == editModel.Id).FirstOrDefault();
                if (found != null)
                {
                    int index = Items.IndexOf(found);
                    // modify => clone
                    Items[index] = resp.Content; // (U)resp.item.Clone();

                }
            } else
            {
                if (!resp.Succeeded)
                    errorMessage = resp.Message;
            }

            editModel = default(U);
        }
    }

    public async Task DeleteClass(int id)
    {
        if (DeleteDelegate != null)
        {
            var response = await DeleteDelegate.Invoke(id);

            if (response.Succeeded && Items != null)
            {
                var toRemove = Items.Where(x => x.Id == id).FirstOrDefault();
                if (toRemove != null)
                    Items.Remove(toRemove);

                editModel = default(U);
            }
            else
                errorMessage = response.Message;

        }
    }
}
